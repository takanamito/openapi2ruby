class <%= @schema.name %>Serializer < ActiveModel::Serializer
  attributes <%= @schema.properties.map{ |p| ":#{p.name}" }.join(', ') -%>

  <%- @schema.properties.select{ |p| p.ref? || p.ref_items? }.each do |p| %>
  def <%= p.name -%>
    <%- if p.ref? %>
    <%= "#{p.ref_class}Serializer.new(object.#{p.ref})" %>
    <%- else %>
    ActiveModel::Serializer::CollectionSerializer.new(
      <%= "object.#{p.name}" -%>,
      serializer: <%= "#{p.ref_class}" -%>Serializer,
    )
    <%- end -%>
  end
  <%- end -%>

  <%- @schema.properties.reject{ |p| p.ref? || p.ref_items? }.each do |p| %>
  def <%= p.name -%>
    <%- if @schema.required?(p) %>
    required_check(<%= ":#{p.name}" %>)
    <%- end %>
    <%- if p.one_of? -%>
    type_check(<%= ":#{p.name}"-%>, [
    <%- p.one_of_refs.map do |ref| -%>
      <%= ref -%>,
    <%- end -%>
    ])
    one_of_<%=- p.name %>(object.<%=- p.name %>)
    <%- else -%>
    type_check(<%= ":#{p.name}, #{p.types}" -%>)
    object.<%=- p.name %>
    <%- end -%>
  end
  <%- end %>
  private
  <%- unless @schema.requireds.nil? %>
  def required_check(name)
    raise "Required field is nil. #{name}" if object.send(name).nil?
  end
  <%- end %>
  def type_check(name, types)
    raise "Field type is invalid. #{name}" unless types.include?(object.send(name).class)
  end
  <%- @schema.properties.select{ |p| p.one_of? }.each do |p| %>
  def one_of_<%=- p.name %>(one_of_value)
    case one_of_value
    <%- p.one_of_refs.each do |ref| -%>
    when <%= ref -%> then
      <%= ref -%>Serializer.new(one_of_value).attributes
    <%- end -%>
    else
      raise "Failed to serialize as one_of ref: #{one_of_value}"
    end
  end
  <%- end -%>
end
